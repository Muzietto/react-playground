define(['exports', './initialState', './dsl'], function (exports, _initialState, _dsl) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.startStep = startStep;

    var _dsl2 = _interopRequireDefault(_dsl);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    function startStep() {
        return (0, _dsl2.default)({
            location: 'startStep',
            backward: [],
            forward: [customvarStep, datasetStep]
        });
    }

    function customvarStep() {
        return (0, _dsl2.default)({
            location: 'customvarStep',
            backward: [startStep],
            forward: [..._initialState.initialState.customvar.map(customVar => labeler('exitStep', exitStep(customVar), customVar))]
        });
    }

    function datasetStep() {
        return (0, _dsl2.default)({
            location: 'datasetStep',
            backward: [startStep],
            forward: [...Object.keys(_initialState.initialState.dataset).map(key => labeler('propertyStep', () => propertyStep(key), _initialState.initialState.dataset_name[parsedStateId(key).currentPos]))]
        });
    }

    function propertyStep(datasetId) {
        let datasetName = _initialState.initialState.dataset_name[parsedStateId(datasetId).currentPos];
        return (0, _dsl2.default)({
            location: 'propertyStep',
            backward: [startStep, labeler('datasetStep', () => datasetStep(), datasetName)],
            forward: [..._initialState.initialState.dataset_keys[parsedStateId(datasetId).currentPos].map(key => datasetName + '.' + key).map(key => labeler('typeStep', () => typeStep(key), key))]
        });
    }

    function typeStep(datasetProperty) {
        let datasetName = datasetProperty.split('.')[0];
        let datasetId = 'dataset#' + _initialState.initialState.dataset_name.findIndex(n => n === datasetName);
        return (0, _dsl2.default)({
            location: 'typeStep',
            backward: [startStep, labeler('propertyStep', () => propertyStep(datasetId), datasetName)],
            forward: [...[randomStep, connectedStep, fixedStep].map(fun => labeler(fun.name, () => fun(datasetProperty), datasetProperty))]
        });
    }

    function randomStep(datasetProperty) {
        return (0, _dsl2.default)({
            location: 'randomStep',
            backward: [startStep, labeler('typeStep', () => typeStep(datasetProperty), datasetProperty)],
            forward: [labeler('exitStep', exitStep(datasetProperty), datasetProperty)]
        });
    }

    function connectedStep(datasetProperty) {
        let datasetPropertyWithSuffix = datasetProperty + '/';
        return (0, _dsl2.default)({
            location: 'connectedStep',
            backward: [startStep, labeler('typeStep', () => typeStep(datasetProperty), datasetProperty)],
            forward: [...datasetIndexes(datasetPropertyWithSuffix).map((arg, index) => labeler('exitStep ' + datasetPropertyWithSuffix + index, exitStep(arg)))]
        });
    }

    function fixedStep(datasetProperty) {
        let datasetPropertyWithSuffix = datasetProperty + '#';
        return (0, _dsl2.default)({
            location: 'fixedStep',
            backward: [startStep, labeler('typeStep', () => typeStep(datasetProperty), datasetProperty)],
            forward: [...datasetIndexes(datasetPropertyWithSuffix).map((arg, index) => labeler('exitStep ' + datasetPropertyWithSuffix + index, exitStep(arg)))]
        });
    }

    function exitStep(value, index) {
        // reasonsforcologne.image/2 --> $(reasonsforcologne.image/2)
        let result = () => {
            alert('$(' + value + ')');
        };
        return labeler('exitStep', result, index);
    }

    function datasetIndexes(datasetPropertyWithSuffix) {
        // reasonsforcologne.image -> reasonsforcologne.image/2
        let datasetName = datasetPropertyWithSuffix.split('.')[0];
        let datasetPos = _initialState.initialState.dataset_name.findIndex(item => item === datasetName);
        let numInstances = _initialState.initialState.dataset['dataset#' + datasetPos].length;
        return [...Array(numInstances).keys()].map(key => datasetPropertyWithSuffix + key);
    }

    function parsedStateId(id) {
        let pieces = id.split('#');
        return {
            currentPos: pieces[1]
        };
    }

    function labeler(stepName, fun, labelValue) {
        Object.defineProperty(fun, 'name', {
            value: stepName + ' ' + (typeof labelValue !== 'undefined' ? labelValue : '')
        });
        return fun;
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzeC9zdGVwcy5qcyJdLCJuYW1lcyI6WyJzdGFydFN0ZXAiLCJsb2NhdGlvbiIsImJhY2t3YXJkIiwiZm9yd2FyZCIsImN1c3RvbXZhclN0ZXAiLCJkYXRhc2V0U3RlcCIsImN1c3RvbXZhciIsIm1hcCIsImN1c3RvbVZhciIsImxhYmVsZXIiLCJleGl0U3RlcCIsIk9iamVjdCIsImtleXMiLCJkYXRhc2V0Iiwia2V5IiwicHJvcGVydHlTdGVwIiwiZGF0YXNldF9uYW1lIiwicGFyc2VkU3RhdGVJZCIsImN1cnJlbnRQb3MiLCJkYXRhc2V0SWQiLCJkYXRhc2V0TmFtZSIsImRhdGFzZXRfa2V5cyIsInR5cGVTdGVwIiwiZGF0YXNldFByb3BlcnR5Iiwic3BsaXQiLCJmaW5kSW5kZXgiLCJuIiwicmFuZG9tU3RlcCIsImNvbm5lY3RlZFN0ZXAiLCJmaXhlZFN0ZXAiLCJmdW4iLCJuYW1lIiwiZGF0YXNldFByb3BlcnR5V2l0aFN1ZmZpeCIsImRhdGFzZXRJbmRleGVzIiwiYXJnIiwiaW5kZXgiLCJ2YWx1ZSIsInJlc3VsdCIsImFsZXJ0IiwiZGF0YXNldFBvcyIsIml0ZW0iLCJudW1JbnN0YW5jZXMiLCJsZW5ndGgiLCJBcnJheSIsImlkIiwicGllY2VzIiwic3RlcE5hbWUiLCJsYWJlbFZhbHVlIiwiZGVmaW5lUHJvcGVydHkiXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7WUFLZ0JBLFMsR0FBQUEsUzs7Ozs7Ozs7OztBQUFULGFBQVNBLFNBQVQsR0FBcUI7QUFDeEIsZUFBTyxtQkFBTztBQUNWQyxzQkFBVSxXQURBO0FBRVZDLHNCQUFVLEVBRkE7QUFHVkMscUJBQVMsQ0FBQ0MsYUFBRCxFQUFnQkMsV0FBaEI7QUFIQyxTQUFQLENBQVA7QUFLSDs7QUFFRCxhQUFTRCxhQUFULEdBQXlCO0FBQ3JCLGVBQU8sbUJBQU87QUFDVkgsc0JBQVUsZUFEQTtBQUVWQyxzQkFBVSxDQUFDRixTQUFELENBRkE7QUFHVkcscUJBQVMsQ0FBQyxHQUFHLDJCQUFNRyxT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RDtBQUNBLGVBQU8sQ0FBQyxHQUFHQyxNQUFNRixZQUFOLEVBQW9CN0IsSUFBcEIsRUFBSixFQUFnQ0wsR0FBaEMsQ0FBb0NPLE9BQU9rQiw0QkFBNEJsQixHQUF2RSxDQUFQO0FBQ0g7O0FBRUQsYUFBU0csYUFBVCxDQUF1QjJCLEVBQXZCLEVBQTJCO0FBQ3ZCLFlBQUlDLFNBQVNELEdBQUdwQixLQUFILENBQVMsR0FBVCxDQUFiO0FBQ0EsZUFBTztBQUNITix3QkFBWTJCLE9BQU8sQ0FBUDtBQURULFNBQVA7QUFHSDs7QUFFRCxhQUFTcEMsT0FBVCxDQUFpQnFDLFFBQWpCLEVBQTJCaEIsR0FBM0IsRUFBZ0NpQixVQUFoQyxFQUE0QztBQUN4Q3BDLGVBQU9xQyxjQUFQLENBQXNCbEIsR0FBdEIsRUFBMkIsTUFBM0IsRUFBbUM7QUFDL0JNLG1CQUFPVSxXQUFXLEdBQVgsSUFDSCxPQUFPQyxVQUFQLEtBQXNCLFdBQXZCLEdBQXNDQSxVQUF0QyxHQUFtRCxFQUQvQztBQUR3QixTQUFuQztBQUlBLGVBQU9qQixHQUFQO0FBQ0giLCJmaWxlIjoic3RlcHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7aW5pdGlhbFN0YXRlIGFzIHN0YXRlfSBmcm9tICcuL2luaXRpYWxTdGF0ZSc7XG5pbXBvcnQgY2hvaWNlIGZyb20gJy4vZHNsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0U3RlcCgpIHtcbiAgICByZXR1cm4gY2hvaWNlKHtcbiAgICAgICAgbG9jYXRpb246ICdzdGFydFN0ZXAnLFxuICAgICAgICBiYWNrd2FyZDogW10sXG4gICAgICAgIGZvcndhcmQ6IFtjdXN0b212YXJTdGVwLCBkYXRhc2V0U3RlcF1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tdmFyU3RlcCgpIHtcbiAgICByZXR1cm4gY2hvaWNlKHtcbiAgICAgICAgbG9jYXRpb246ICdjdXN0b212YXJTdGVwJyxcbiAgICAgICAgYmFja3dhcmQ6IFtzdGFydFN0ZXAsXSxcbiAgICAgICAgZm9yd2FyZDogWy4uLnN0YXRlLmN1c3RvbXZhclxuICAgICAgICAgICAgLm1hcChjdXN0b21WYXIgPT4gbGFiZWxlcignZXhpdFN0ZXAnLCBleGl0U3RlcChjdXN0b21WYXIpLCBjdXN0b21WYXIpKV1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZGF0YXNldFN0ZXAoKSB7XG4gICAgcmV0dXJuIGNob2ljZSh7XG4gICAgICAgIGxvY2F0aW9uOiAnZGF0YXNldFN0ZXAnLFxuICAgICAgICBiYWNrd2FyZDogW3N0YXJ0U3RlcCxdLFxuICAgICAgICBmb3J3YXJkOiBbXG4gICAgICAgICAgICAuLi5PYmplY3Qua2V5cyhzdGF0ZS5kYXRhc2V0KVxuICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IGxhYmVsZXIoJ3Byb3BlcnR5U3RlcCcsXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHByb3BlcnR5U3RlcChrZXkpLCBzdGF0ZS5kYXRhc2V0X25hbWVbcGFyc2VkU3RhdGVJZChrZXkpLmN1cnJlbnRQb3NdKSlcbiAgICAgICAgXVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eVN0ZXAoZGF0YXNldElkKSB7XG4gICAgbGV0IGRhdGFzZXROYW1lID0gc3RhdGUuZGF0YXNldF9uYW1lW3BhcnNlZFN0YXRlSWQoZGF0YXNldElkKS5jdXJyZW50UG9zXTtcbiAgICByZXR1cm4gY2hvaWNlKHtcbiAgICAgICAgbG9jYXRpb246ICdwcm9wZXJ0eVN0ZXAnLFxuICAgICAgICBiYWNrd2FyZDogW1xuICAgICAgICAgICAgc3RhcnRTdGVwLFxuICAgICAgICAgICAgbGFiZWxlcignZGF0YXNldFN0ZXAnLCAoKSA9PiBkYXRhc2V0U3RlcCgpLCBkYXRhc2V0TmFtZSlcbiAgICAgICAgXSxcbiAgICAgICAgZm9yd2FyZDogW1xuICAgICAgICAgICAgLi4uc3RhdGUuZGF0YXNldF9rZXlzW3BhcnNlZFN0YXRlSWQoZGF0YXNldElkKS5jdXJyZW50UG9zXVxuICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IGRhdGFzZXROYW1lICsgJy4nICsga2V5KVxuICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IGxhYmVsZXIoJ3R5cGVTdGVwJywgKCkgPT4gdHlwZVN0ZXAoa2V5KSwga2V5KSlcbiAgICAgICAgXVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0eXBlU3RlcChkYXRhc2V0UHJvcGVydHkpIHtcbiAgICBsZXQgZGF0YXNldE5hbWUgPSBkYXRhc2V0UHJvcGVydHkuc3BsaXQoJy4nKVswXTtcbiAgICBsZXQgZGF0YXNldElkID0gJ2RhdGFzZXQjJyArIHN0YXRlLmRhdGFzZXRfbmFtZS5maW5kSW5kZXgobiA9PiBuID09PSBkYXRhc2V0TmFtZSk7XG4gICAgcmV0dXJuIGNob2ljZSh7XG4gICAgICAgIGxvY2F0aW9uOiAndHlwZVN0ZXAnLFxuICAgICAgICBiYWNrd2FyZDogW1xuICAgICAgICAgICAgc3RhcnRTdGVwLFxuICAgICAgICAgICAgbGFiZWxlcigncHJvcGVydHlTdGVwJywgKCkgPT4gcHJvcGVydHlTdGVwKGRhdGFzZXRJZCksIGRhdGFzZXROYW1lKVxuICAgICAgICBdLFxuICAgICAgICBmb3J3YXJkOiBbXG4gICAgICAgICAgICAuLi5bcmFuZG9tU3RlcCwgY29ubmVjdGVkU3RlcCwgZml4ZWRTdGVwXVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuID0+IGxhYmVsZXIoZnVuLm5hbWUsICgpID0+IGZ1bihkYXRhc2V0UHJvcGVydHkpLCBkYXRhc2V0UHJvcGVydHkpKVxuICAgICAgICBdXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHJhbmRvbVN0ZXAoZGF0YXNldFByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGNob2ljZSh7XG4gICAgICAgIGxvY2F0aW9uOiAncmFuZG9tU3RlcCcsXG4gICAgICAgIGJhY2t3YXJkOiBbXG4gICAgICAgICAgICBzdGFydFN0ZXAsXG4gICAgICAgICAgICBsYWJlbGVyKCd0eXBlU3RlcCcsICgpID0+IHR5cGVTdGVwKGRhdGFzZXRQcm9wZXJ0eSksIGRhdGFzZXRQcm9wZXJ0eSlcbiAgICAgICAgXSxcbiAgICAgICAgZm9yd2FyZDogW1xuICAgICAgICAgICAgbGFiZWxlcignZXhpdFN0ZXAnLCBleGl0U3RlcChkYXRhc2V0UHJvcGVydHkpLCBkYXRhc2V0UHJvcGVydHkpLFxuICAgICAgICBdXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbm5lY3RlZFN0ZXAoZGF0YXNldFByb3BlcnR5KSB7XG4gICAgbGV0IGRhdGFzZXRQcm9wZXJ0eVdpdGhTdWZmaXggPSBkYXRhc2V0UHJvcGVydHkgKyAnLyc7XG4gICAgcmV0dXJuIGNob2ljZSh7XG4gICAgICAgIGxvY2F0aW9uOiAnY29ubmVjdGVkU3RlcCcsXG4gICAgICAgIGJhY2t3YXJkOiBbXG4gICAgICAgICAgICBzdGFydFN0ZXAsXG4gICAgICAgICAgICBsYWJlbGVyKCd0eXBlU3RlcCcsICgpID0+IHR5cGVTdGVwKGRhdGFzZXRQcm9wZXJ0eSksIGRhdGFzZXRQcm9wZXJ0eSlcbiAgICAgICAgXSxcbiAgICAgICAgZm9yd2FyZDogW1xuICAgICAgICAgICAgLi4uZGF0YXNldEluZGV4ZXMoZGF0YXNldFByb3BlcnR5V2l0aFN1ZmZpeClcbiAgICAgICAgICAgICAgICAubWFwKChhcmcsIGluZGV4KSA9PiBsYWJlbGVyKCdleGl0U3RlcCAnICsgZGF0YXNldFByb3BlcnR5V2l0aFN1ZmZpeCArIGluZGV4LCBleGl0U3RlcChhcmcpKSlcbiAgICAgICAgXVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBmaXhlZFN0ZXAoZGF0YXNldFByb3BlcnR5KSB7XG4gICAgbGV0IGRhdGFzZXRQcm9wZXJ0eVdpdGhTdWZmaXggPSBkYXRhc2V0UHJvcGVydHkgKyAnIyc7XG4gICAgcmV0dXJuIGNob2ljZSh7XG4gICAgICAgIGxvY2F0aW9uOiAnZml4ZWRTdGVwJyxcbiAgICAgICAgYmFja3dhcmQ6IFtcbiAgICAgICAgICAgIHN0YXJ0U3RlcCxcbiAgICAgICAgICAgIGxhYmVsZXIoJ3R5cGVTdGVwJywgKCkgPT4gdHlwZVN0ZXAoZGF0YXNldFByb3BlcnR5KSwgZGF0YXNldFByb3BlcnR5KVxuICAgICAgICBdLFxuICAgICAgICBmb3J3YXJkOiBbXG4gICAgICAgICAgICAuLi5kYXRhc2V0SW5kZXhlcyhkYXRhc2V0UHJvcGVydHlXaXRoU3VmZml4KVxuICAgICAgICAgICAgICAgIC5tYXAoKGFyZywgaW5kZXgpID0+IGxhYmVsZXIoJ2V4aXRTdGVwICcgKyBkYXRhc2V0UHJvcGVydHlXaXRoU3VmZml4ICsgaW5kZXgsIGV4aXRTdGVwKGFyZykpKVxuICAgICAgICBdXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGV4aXRTdGVwKHZhbHVlLCBpbmRleCkgeyAvLyByZWFzb25zZm9yY29sb2duZS5pbWFnZS8yIC0tPiAkKHJlYXNvbnNmb3Jjb2xvZ25lLmltYWdlLzIpXG4gICAgbGV0IHJlc3VsdCA9ICgpID0+IHtcbiAgICAgICAgYWxlcnQoJyQoJyArIHZhbHVlICsgJyknKTtcbiAgICB9O1xuICAgIHJldHVybiBsYWJlbGVyKCdleGl0U3RlcCcsIHJlc3VsdCwgaW5kZXgpO1xufVxuXG5mdW5jdGlvbiBkYXRhc2V0SW5kZXhlcyhkYXRhc2V0UHJvcGVydHlXaXRoU3VmZml4KSB7IC8vIHJlYXNvbnNmb3Jjb2xvZ25lLmltYWdlIC0+IHJlYXNvbnNmb3Jjb2xvZ25lLmltYWdlLzJcbiAgICBsZXQgZGF0YXNldE5hbWUgPSBkYXRhc2V0UHJvcGVydHlXaXRoU3VmZml4LnNwbGl0KCcuJylbMF07XG4gICAgbGV0IGRhdGFzZXRQb3MgPSBzdGF0ZS5kYXRhc2V0X25hbWUuZmluZEluZGV4KGl0ZW0gPT4gaXRlbSA9PT0gZGF0YXNldE5hbWUpO1xuICAgIGxldCBudW1JbnN0YW5jZXMgPSBzdGF0ZS5kYXRhc2V0WydkYXRhc2V0IycgKyBkYXRhc2V0UG9zXS5sZW5ndGg7XG4gICAgcmV0dXJuIFsuLi5BcnJheShudW1JbnN0YW5jZXMpLmtleXMoKV0ubWFwKGtleSA9PiBkYXRhc2V0UHJvcGVydHlXaXRoU3VmZml4ICsga2V5KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VkU3RhdGVJZChpZCkge1xuICAgIGxldCBwaWVjZXMgPSBpZC5zcGxpdCgnIycpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGN1cnJlbnRQb3M6IHBpZWNlc1sxXSxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBsYWJlbGVyKHN0ZXBOYW1lLCBmdW4sIGxhYmVsVmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuLCAnbmFtZScsIHtcbiAgICAgICAgdmFsdWU6IHN0ZXBOYW1lICsgJyAnXG4gICAgICAgICsgKCh0eXBlb2YgbGFiZWxWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpID8gbGFiZWxWYWx1ZSA6ICcnKVxuICAgIH0pO1xuICAgIHJldHVybiBmdW47XG59XG4iXX0=