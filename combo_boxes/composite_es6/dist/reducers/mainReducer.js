define(['exports', '../actions/actions', '../misc/util'], function (exports, _actions, _util) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.mainReducer = undefined;

  var _util2 = _interopRequireDefault(_util);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function mainReducer(state, action) {
    switch (action.type) {
      case _actions.ActionTypes.USER_ENTERS_GROUP:
        var updatedUserGroup = Object.assign({}, state.user_group, { [action.idUser]: state.user_group[action.idUser].concat([action.idGroup]) });
        var updatedGroupUser = Object.assign({}, state.group_user, { [action.idGroup]: state.group_user[action.idGroup].concat([action.idUser]) });
        var updatedGroupNoUser = Object.assign({}, state.group_no_user, { [action.idGroup]: state.group_no_user[action.idGroup].filter(uId => uId !== action.idUser) });
        return Object.assign({}, state, {
          user_group: updatedUserGroup,
          group_user: updatedGroupUser,
          group_no_user: updatedGroupNoUser
        });
      case _actions.ActionTypes.USER_LEAVES_GROUP:
        var updatedUserGroup = Object.assign({}, state.user_group, { [action.idUser]: state.user_group[action.idUser].filter(gId => gId !== action.idGroup) });
        var updatedGroupUser = Object.assign({}, state.group_user, { [action.idGroup]: state.group_user[action.idGroup].filter(uId => uId !== action.idUser) });
        var updatedGroupNoUser = Object.assign({}, state.group_no_user, { [action.idGroup]: state.group_no_user[action.idGroup].concat([action.idUser]) });
        return Object.assign({}, state, {
          user_group: updatedUserGroup,
          group_user: updatedGroupUser,
          group_no_user: updatedGroupNoUser
        });
      default:
        return state;
    }
  }

  exports.mainReducer = mainReducer;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2pzeC9yZWR1Y2Vycy9tYWluUmVkdWNlci5qc3giXSwibmFtZXMiOlsibWFpblJlZHVjZXIiLCJzdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJVU0VSX0VOVEVSU19HUk9VUCIsInVwZGF0ZWRVc2VyR3JvdXAiLCJPYmplY3QiLCJhc3NpZ24iLCJ1c2VyX2dyb3VwIiwiaWRVc2VyIiwiY29uY2F0IiwiaWRHcm91cCIsInVwZGF0ZWRHcm91cFVzZXIiLCJncm91cF91c2VyIiwidXBkYXRlZEdyb3VwTm9Vc2VyIiwiZ3JvdXBfbm9fdXNlciIsImZpbHRlciIsInVJZCIsIlVTRVJfTEVBVkVTX0dST1VQIiwiZ0lkIl0sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQUtBLFdBQVNBLFdBQVQsQ0FBcUJDLEtBQXJCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNsQyxZQUFRQSxPQUFPQyxJQUFmO0FBQ0UsV0FBSyxxQkFBWUMsaUJBQWpCO0FBQ0UsWUFBSUMsbUJBQW1CQyxPQUFPQyxNQUFQLENBQ3JCLEVBRHFCLEVBRXJCTixNQUFNTyxVQUZlLEVBR3JCLEVBQUMsQ0FBQ04sT0FBT08sTUFBUixHQUFrQlIsTUFBTU8sVUFBTixDQUFpQk4sT0FBT08sTUFBeEIsRUFBZ0NDLE1BQWhDLENBQXVDLENBQUNSLE9BQU9TLE9BQVIsQ0FBdkMsQ0FBbkIsRUFIcUIsQ0FBdkI7QUFLQSxZQUFJQyxtQkFBbUJOLE9BQU9DLE1BQVAsQ0FDckIsRUFEcUIsRUFFckJOLE1BQU1ZLFVBRmUsRUFHckIsRUFBQyxDQUFDWCxPQUFPUyxPQUFSLEdBQW1CVixNQUFNWSxVQUFOLENBQWlCWCxPQUFPUyxPQUF4QixFQUFpQ0QsTUFBakMsQ0FBd0MsQ0FBQ1IsT0FBT08sTUFBUixDQUF4QyxDQUFwQixFQUhxQixDQUF2QjtBQUtBLFlBQUlLLHFCQUFxQlIsT0FBT0MsTUFBUCxDQUN2QixFQUR1QixFQUV2Qk4sTUFBTWMsYUFGaUIsRUFHdkIsRUFBQyxDQUFDYixPQUFPUyxPQUFSLEdBQWtCVixNQUFNYyxhQUFOLENBQW9CYixPQUFPUyxPQUEzQixFQUFvQ0ssTUFBcEMsQ0FBMkNDLE9BQVFBLFFBQVFmLE9BQU9PLE1BQWxFLENBQW5CLEVBSHVCLENBQXpCO0FBS0EsZUFBT0gsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JOLEtBQWxCLEVBQXlCO0FBQzlCTyxzQkFBWUgsZ0JBRGtCO0FBRTlCUSxzQkFBWUQsZ0JBRmtCO0FBRzlCRyx5QkFBZUQ7QUFIZSxTQUF6QixDQUFQO0FBS0YsV0FBSyxxQkFBWUksaUJBQWpCO0FBQ0UsWUFBSWIsbUJBQW1CQyxPQUFPQyxNQUFQLENBQ3JCLEVBRHFCLEVBRXJCTixNQUFNTyxVQUZlLEVBR3JCLEVBQUMsQ0FBQ04sT0FBT08sTUFBUixHQUFpQlIsTUFBTU8sVUFBTixDQUFpQk4sT0FBT08sTUFBeEIsRUFBZ0NPLE1BQWhDLENBQXVDRyxPQUFRQSxRQUFRakIsT0FBT1MsT0FBOUQsQ0FBbEIsRUFIcUIsQ0FBdkI7QUFLQSxZQUFJQyxtQkFBbUJOLE9BQU9DLE1BQVAsQ0FDckIsRUFEcUIsRUFFckJOLE1BQU1ZLFVBRmUsRUFHckIsRUFBQyxDQUFDWCxPQUFPUyxPQUFSLEdBQWtCVixNQUFNWSxVQUFOLENBQWlCWCxPQUFPUyxPQUF4QixFQUFpQ0ssTUFBakMsQ0FBd0NDLE9BQVFBLFFBQVFmLE9BQU9PLE1BQS9ELENBQW5CLEVBSHFCLENBQXZCO0FBS0EsWUFBSUsscUJBQXFCUixPQUFPQyxNQUFQLENBQ3ZCLEVBRHVCLEVBRXZCTixNQUFNYyxhQUZpQixFQUd2QixFQUFDLENBQUNiLE9BQU9TLE9BQVIsR0FBbUJWLE1BQU1jLGFBQU4sQ0FBb0JiLE9BQU9TLE9BQTNCLEVBQW9DRCxNQUFwQyxDQUEyQyxDQUFDUixPQUFPTyxNQUFSLENBQTNDLENBQXBCLEVBSHVCLENBQXpCO0FBS0EsZUFBT0gsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JOLEtBQWxCLEVBQXlCO0FBQzlCTyxzQkFBWUgsZ0JBRGtCO0FBRTlCUSxzQkFBWUQsZ0JBRmtCO0FBRzlCRyx5QkFBZUQ7QUFIZSxTQUF6QixDQUFQO0FBS0Y7QUFDRSxlQUFPYixLQUFQO0FBNUNKO0FBOENEOztVQUVRRCxXLEdBQUFBLFciLCJmaWxlIjoibWFpblJlZHVjZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4uL2FjdGlvbnMvYWN0aW9ucydcclxuaW1wb3J0IHV0aWwgZnJvbSAnLi4vbWlzYy91dGlsJztcclxuXHJcbmZ1bmN0aW9uIG1haW5SZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcclxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIEFjdGlvblR5cGVzLlVTRVJfRU5URVJTX0dST1VQOlxyXG4gICAgICB2YXIgdXBkYXRlZFVzZXJHcm91cCA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICAgICAge30sXHJcbiAgICAgICAgc3RhdGUudXNlcl9ncm91cCxcclxuICAgICAgICB7W2FjdGlvbi5pZFVzZXJdOiAgc3RhdGUudXNlcl9ncm91cFthY3Rpb24uaWRVc2VyXS5jb25jYXQoW2FjdGlvbi5pZEdyb3VwXSl9XHJcbiAgICAgICk7XHJcbiAgICAgIHZhciB1cGRhdGVkR3JvdXBVc2VyID0gT2JqZWN0LmFzc2lnbihcclxuICAgICAgICB7fSxcclxuICAgICAgICBzdGF0ZS5ncm91cF91c2VyLFxyXG4gICAgICAgIHtbYWN0aW9uLmlkR3JvdXBdOiAgc3RhdGUuZ3JvdXBfdXNlclthY3Rpb24uaWRHcm91cF0uY29uY2F0KFthY3Rpb24uaWRVc2VyXSl9XHJcbiAgICAgICk7XHJcbiAgICAgIHZhciB1cGRhdGVkR3JvdXBOb1VzZXIgPSBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgIHt9LFxyXG4gICAgICAgIHN0YXRlLmdyb3VwX25vX3VzZXIsXHJcbiAgICAgICAge1thY3Rpb24uaWRHcm91cF06IHN0YXRlLmdyb3VwX25vX3VzZXJbYWN0aW9uLmlkR3JvdXBdLmZpbHRlcih1SWQgPT4gKHVJZCAhPT0gYWN0aW9uLmlkVXNlcikpfVxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgXHJcbiAgICAgICAgdXNlcl9ncm91cDogdXBkYXRlZFVzZXJHcm91cCxcclxuICAgICAgICBncm91cF91c2VyOiB1cGRhdGVkR3JvdXBVc2VyLFxyXG4gICAgICAgIGdyb3VwX25vX3VzZXI6IHVwZGF0ZWRHcm91cE5vVXNlcixcclxuICAgICAgfSk7XHJcbiAgICBjYXNlIEFjdGlvblR5cGVzLlVTRVJfTEVBVkVTX0dST1VQOlxyXG4gICAgICB2YXIgdXBkYXRlZFVzZXJHcm91cCA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICAgICAge30sXHJcbiAgICAgICAgc3RhdGUudXNlcl9ncm91cCxcclxuICAgICAgICB7W2FjdGlvbi5pZFVzZXJdOiBzdGF0ZS51c2VyX2dyb3VwW2FjdGlvbi5pZFVzZXJdLmZpbHRlcihnSWQgPT4gKGdJZCAhPT0gYWN0aW9uLmlkR3JvdXApKX1cclxuICAgICAgKTtcclxuICAgICAgdmFyIHVwZGF0ZWRHcm91cFVzZXIgPSBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgIHt9LFxyXG4gICAgICAgIHN0YXRlLmdyb3VwX3VzZXIsXHJcbiAgICAgICAge1thY3Rpb24uaWRHcm91cF06IHN0YXRlLmdyb3VwX3VzZXJbYWN0aW9uLmlkR3JvdXBdLmZpbHRlcih1SWQgPT4gKHVJZCAhPT0gYWN0aW9uLmlkVXNlcikpfVxyXG4gICAgICApO1xyXG4gICAgICB2YXIgdXBkYXRlZEdyb3VwTm9Vc2VyID0gT2JqZWN0LmFzc2lnbihcclxuICAgICAgICB7fSxcclxuICAgICAgICBzdGF0ZS5ncm91cF9ub191c2VyLFxyXG4gICAgICAgIHtbYWN0aW9uLmlkR3JvdXBdOiAgc3RhdGUuZ3JvdXBfbm9fdXNlclthY3Rpb24uaWRHcm91cF0uY29uY2F0KFthY3Rpb24uaWRVc2VyXSl9XHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBcclxuICAgICAgICB1c2VyX2dyb3VwOiB1cGRhdGVkVXNlckdyb3VwLFxyXG4gICAgICAgIGdyb3VwX3VzZXI6IHVwZGF0ZWRHcm91cFVzZXIsXHJcbiAgICAgICAgZ3JvdXBfbm9fdXNlcjogdXBkYXRlZEdyb3VwTm9Vc2VyLFxyXG4gICAgICB9KTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IG1haW5SZWR1Y2VyIH07Il19